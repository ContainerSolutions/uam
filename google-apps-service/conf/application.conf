# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "4v3xrwjKzrbaobpQGJNDeMh74vJFl312DyOL4o5AA2ioxZJg2BkL_F8V"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false
#
# Application specific configuration
google.directory.rest.url="https://www.googleapis.com/admin/directory/v1/"
consul.store.rest.url="https://52.34.21.216:8500/v1/kv/"

play.ws.ssl.loose.acceptAnyCertificate=true
play.ws.ssl {
  trustManager = {
    stores = [
      { type = "PEM", path = "conf/mantl.crt" },{ type = "PEM", path = "conf/vault.crt" }
    ]
  }
}

play.filters.cors {
    # The path prefixes to filter.
    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = null

    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null

    # The exposed headers
    exposedHeaders = []

    # Whether to support credentials
    supportsCredentials = true

    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 1 hour
}


akka.actor.deployment {
/users {
	router = balancing-pool
	nr-of-instances = 10
	}

/users-repository {
	router = balancing-pool
	nr-of-instances = 10
	}

/groups{
	router = balancing-pool
	nr-of-instances = 10
	}

/groups-repository {
	router = balancing-pool
	nr-of-instances = 10
	}
/audit {
	router = balancing-pool
	nr-of-instances = 10
	}

}
